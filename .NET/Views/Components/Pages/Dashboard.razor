@page "/dashboard"
@using Task.Models
@using Task.Interfaces
@inject ITaskItem TaskItemService
@inject IJSRuntime JS

<header class="header">
    <div class="header-left">
        <button class="menu-toggle" id="menuToggle">
            <i class="fas fa-bars"></i>
        </button>
        <h1 class="header-title">My Dashboard</h1>
    </div>

    <div class="header-center">
        <div class="search-box">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Pesquisar...">
        </div>
    </div>

    <div class="header-right">
        <button class="header-btn">
            <i class="fas fa-bell"></i>
            <span class="badge">3</span>
        </button>
        <button class="header-btn">
            <i class="fas fa-cog"></i>
        </button>
        <div class="user-profile">
            <img src="/placeholder.svg?height=32&width=32" alt="user">
            <span>João Silva</span>
            <i class="fas fa-chevron-down"></i>
        </div>
    </div>
</header>

<aside class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo">
            <i class="fas fa-cube"></i>
            <span>Innertia 0.1beta</span>
        </div>
    </div>

    <nav class="sidebar-nav">
        <ul class="nav-list">
            <li class="nav-item active">
                <a href="/dashboard" class="nav-link">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/annotations_v1" class="nav-link">
                    <i class="fas fa-tasks"></i>
                    <span>Annotations</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/boards_v1" class="nav-link">
                    <i class="fas fa-users"></i>
                    <span>Boards</span>
                </a>
            </li>
            <li class="nav-item">
                <a href="/analytics_v1" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    <span>Analytics</span>
                </a>
            </li>
        </ul>
    </nav>
</aside>

<main class="main-content">
    <!-- Stats -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-icon bg-blue">
                <i class="fas fa-tasks"></i>
            </div>
            <div class="stat-content">
                <h3>@(ToDo.Count + Doing.Count + Review.Count + Done.Count)</h3>
                <p>Tarefas Totais</p>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon bg-green">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-content">
                <h3>@Done.Count</h3>
                <p>Concluídas</p>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon bg-orange">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <h3>@(ToDo.Count + Doing.Count + Review.Count)</h3>
                <p>Pendentes</p>
            </div>
        </div>
    </div>

    <!-- Kanban -->
    <div class="kanban-container">
        <div class="kanban-header">
            <h2 id='testing2'>Quadro de Tarefas</h2>
            <button class="btn btn-primary" @onclick="AddDummyTask">
                <i class="fas fa-plus"></i>
                Nova Tarefa
            </button>
        </div>

        <div class="kanban-board">
            @KanbanColumn("A Fazer", "ToDo", ToDo)
            @KanbanColumn("Em Progresso", "Doing", Doing)
            @KanbanColumn("Em Revisão", "Review", Review)
            @KanbanColumn("Concluído", "Done", Done, isCompleted: true)
        </div>
    </div>
</main>

@code
{
    // MODELO SIMPLES (alinhe ao seu Task.Models)
    public class TaskItemVM
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Status { get; set; } = "ToDo"; // ToDo | Doing | Review | Done
        public int Order { get; set; } // opcional
        public string Priority { get; set; } = "medium"; // low | medium | high
        public DateTime? DueDate { get; set; }
    }

    private DotNetObjectReference<Dashboard>? _dotnetRef;

    // Listas por coluna
    private List<TaskItemVM> ToDo   = new();
    private List<TaskItemVM> Doing  = new();
    private List<TaskItemVM> Review = new();
    private List<TaskItemVM> Done   = new();

    // EXEMPLO: carregamento (troque pelo teu ITaskItem)
    protected override async Task OnInitializedAsync()
    {
        // TODO: Substituir pelos dados reais do teu service TaskItemService
        ToDo = new()
        {
            new TaskItemVM{ Id=1, Title="Implementar autenticação", Description="Login e registro", Status="ToDo", Priority="high",   DueDate=DateTime.Today.AddDays(2)},
            new TaskItemVM{ Id=2, Title="Design da homepage",       Description="Mockups e protótipos", Status="ToDo", Priority="medium", DueDate=DateTime.Today.AddDays(3)},
            new TaskItemVM{ Id=3, Title="Documentação API",         Description="Escrever endpoints", Status="ToDo", Priority="low",    DueDate=DateTime.Today.AddDays(5)}
        };

        Doing = new()
        {
            new TaskItemVM{ Id=4, Title="Dashboard responsivo",      Description="Mobile first", Status="Doing", Priority="high", DueDate=DateTime.Today.AddDays(1)},
            new TaskItemVM{ Id=5, Title="Integração banco de dados", Description="PostgreSQL",   Status="Doing", Priority="medium", DueDate=DateTime.Today.AddDays(2)}
        };

        Review = new()
        {
            new TaskItemVM{ Id=6, Title="Testes unitários", Description="Módulos principais", Status="Review", Priority="medium", DueDate=DateTime.Today.AddDays(1)},
        };

        Done = new()
        {
            new TaskItemVM{ Id=7, Title="Setup inicial do projeto", Description="Ambiente dev", Status="Done", Priority="low", DueDate=DateTime.Today.AddDays(-2)},
            new TaskItemVM{ Id=8, Title="Estrutura do banco",       Description="Schema",      Status="Done", Priority="medium", DueDate=DateTime.Today.AddDays(-1)}
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotnetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("kanban.init", _dotnetRef);
        }
    }

    [JSInvokable]
    public async Task OnCardDropped(int taskId, string newStatus, int newIndex)
    {
        // 1) Localiza de qual lista veio
        var all = ToDo.Concat(Doing).Concat(Review).Concat(Done).ToList();
        var task = all.FirstOrDefault(t => t.Id == taskId);
        if (task is null) return;

        // 2) Remove da lista antiga
        RemoveFromCurrentList(task);

        // 3) Atualiza status e insere na nova coluna na posição correta
        task.Status = newStatus;
        var targetList = GetListByStatus(newStatus);
        newIndex = Math.Clamp(newIndex, 0, targetList.Count);
        targetList.Insert(newIndex, task);

        // 4) (Opcional) Persistir no banco via service
        // await TaskItemService.UpdateStatusAsync(taskId, newStatus, newIndex);

        StateHasChanged();
    }

    private void RemoveFromCurrentList(TaskItemVM task)
    {
        _ = task.Status switch
        {
            "ToDo"   => ToDo.Remove(task),
            "Doing"  => Doing.Remove(task),
            "Review" => Review.Remove(task),
            "Done"   => Done.Remove(task),
            _ => false
        };
    }

    private List<TaskItemVM> GetListByStatus(string status) => status switch
    {
        "ToDo"   => ToDo,
        "Doing"  => Doing,
        "Review" => Review,
        "Done"   => Done,
        _ => ToDo
    };

    private void AddDummyTask()
    {
        var id = (ToDo.Concat(Doing).Concat(Review).Concat(Done).DefaultIfEmpty().Max(t => t?.Id) ?? 0) + 1;
        ToDo.Add(new TaskItemVM
        {
            Id = id,
            Title = $"Tarefa {id}",
            Description = "Tarefa criada via botão",
            Status = "ToDo",
            Priority = "medium",
            DueDate = DateTime.Today.AddDays(7)
        });
    }

    // Renderizador de coluna
    RenderFragment KanbanColumn(string title, string status, List<TaskItemVM> items, bool isCompleted = false) => __builder =>
    {
        <div class="kanban-column">
            <div class="column-header">
                <h3>@title</h3>
                <span class="task-count">@items.Count</span>
            </div>

            <div class="column-content dropzone"
                 data-status="@status">
                @foreach (var t in items.Select((v, i) => new { v, i }))
                {
                    <div class="kanban-card @(isCompleted ? "completed" : "") drag-drop"
                         draggable="true"
                         data-id="@t.v.Id"
                         data-index="@t.i">
                        <div class="card-header">
                            <span class="card-priority @t.v.Priority">
                                @PriorityLabel(t.v.Priority)
                            </span>
                            <button class="card-menu">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                        <h4>@t.v.Title</h4>
                        <p>@t.v.Description</p>

                        @if (t.v.Status is "Doing")
                        {
                            <div class="card-progress">
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: 60%"></div>
                                </div>
                                <span>60%</span>
                            </div>
                        }

                        <div class="card-footer">
                            <div class="card-assignees">
                                <img src="/placeholder.svg?height=24&width=24" alt="User">
                            </div>
                            <span class="card-date">@t.v.DueDate?.ToString("dd MMM")</span>
                        </div>
                    </div>
                }
            </div>
        </div>;
    };

    private static string PriorityLabel(string p) => p switch
    {
        "high" => "Alta",
        "medium" => "Média",
        "low" => "Baixa",
        _ => "Média"
    };
}
